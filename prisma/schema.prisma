// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  clerkUserId String       @unique
  email       String       @unique
  username    String       @unique
  name        String?
  imageUrl    String?
  
  events      Event[]
  bookings    Booking[]
  availability Availability?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Event {
  id          String       @id @default(cuid())
  title       String
  description String?
  duration    Int
  userId      String
  bookings    Booking[]
  isPublic    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user        User         @relation(fields: [userId], references: [id])
}

model Booking {
  id             String       @id @default(cuid())
  eventId        String
  userId         String
  isAccepted     Boolean      @default(false)
  name           String
  email          String
  additionalInfo String?
  startTime      DateTime
  endTime        DateTime
  meetLink       String
  googleEventId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
}

model Availability {
  id          String           @id @default(cuid())
  userId      String           @unique
  timeGap     Int
  days        DayAvailability[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user        User             @relation(fields: [userId], references: [id])
}

model DayAvailability {
  id             String       @id @default(cuid())
  availabilityId String
  day            DayInWeek
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

enum DayInWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}